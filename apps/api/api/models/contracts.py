# generated by datamodel-codegen:
#   filename:  contracts.schema.json
#   timestamp: 2025-08-18T08:33:19+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Node(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., min_length=1)
    tag: str = Field(..., min_length=1)
    role: Optional[str] = None
    testid: Optional[str] = None
    name: Optional[str] = None
    ariaLabel: Optional[str] = None
    textSnippet: Optional[str] = Field(None, max_length=160)
    cssFingerprint: Optional[str] = Field(None, max_length=128)
    pathFingerprint: str = Field(..., min_length=1)
    visible: bool
    hrefOriginSafe: Optional[AnyUrl] = None


class ElementAtlas(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    atlasVersion: str = Field(..., min_length=1)
    url: AnyUrl
    title: Optional[str] = None
    capturedAt: AwareDatetime
    snapshotSha256: str = Field(..., min_length=16)
    nodes: List[Node] = Field(..., min_length=1)


DomSnapshot = ElementAtlas


class PlanRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    siteId: Optional[UUID] = None
    url: AnyUrl
    intent: str = Field(..., min_length=1)
    atlasVersion: str = Field(..., min_length=1)
    domSnapshot: DomSnapshot
    doNotStore: Optional[bool] = None


class Cache(Enum):
    HIT = 'HIT'
    MISS = 'MISS'


class Action(Enum):
    CLICK = 'CLICK'
    INPUT = 'INPUT'
    SELECT = 'SELECT'
    WAIT = 'WAIT'
    SCROLL = 'SCROLL'
    NAVIGATE = 'NAVIGATE'


class Strategy(Enum):
    CSS = 'CSS'
    ARIA = 'ARIA'
    XPATH = 'XPATH'


class Selector1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    strategy: Strategy
    value: str = Field(..., min_length=1)


class Condition(Enum):
    EXISTS = 'EXISTS'
    VISIBLE = 'VISIBLE'
    TEXT_CONTAINS = 'TEXT_CONTAINS'


class When(Enum):
    selector_not_found = 'selector_not_found'
    assert_failed = 'assert_failed'


Selector2 = Selector1


Selector = Selector1


Selector3 = Selector1


Selector4 = Selector1


class Assertion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    selector: Selector4
    condition: Condition
    text: Optional[str] = None
    timeoutMs: Optional[int] = Field(None, gt=0)


Try = Selector1


class Fallback(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    when: When
    try_: Try = Field(..., alias='try')


SelectorModel = Selector1


SelectorModel1 = Selector1


SelectorModel2 = Selector1


class AssertItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    selector: SelectorModel2
    condition: Condition
    text: Optional[str] = None
    timeoutMs: Optional[int] = Field(None, gt=0)


class Step(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    action: Action
    selector: Optional[Selector1] = None
    inputValue: Optional[str] = None
    notes: Optional[str] = None
    assert_: Optional[List[AssertItem]] = Field(None, alias='assert')


class Fallback1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    when: When
    try_: SelectorModel2 = Field(..., alias='try')


class Plan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    agentVersion: str
    planId: UUID
    steps: List[Step] = Field(..., min_length=1)
    fallbacks: Optional[List[Fallback1]] = None
    cacheKey: Optional[str] = None
    confidence: Optional[float] = Field(None, ge=0.0, le=1.0)


class PlanResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sessionId: UUID
    agentVersion: str
    planId: UUID
    cache: Cache
    plan: Plan


class AssertItem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    selector: SelectorModel1
    condition: Condition
    text: Optional[str] = None
    timeoutMs: Optional[int] = Field(None, gt=0)


class Step1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    action: Action
    selector: Optional[Selector2] = None
    inputValue: Optional[str] = None
    notes: Optional[str] = None
    assert_: Optional[List[AssertItem1]] = Field(None, alias='assert')


class Fallback2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    when: When
    try_: SelectorModel1 = Field(..., alias='try')


class DomActionPlan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    agentVersion: str
    planId: UUID
    steps: List[Step1] = Field(..., min_length=1)
    fallbacks: Optional[List[Fallback2]] = None
    cacheKey: Optional[str] = None
    confidence: Optional[float] = Field(None, ge=0.0, le=1.0)


class AssertItem2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    selector: SelectorModel
    condition: Condition
    text: Optional[str] = None
    timeoutMs: Optional[int] = Field(None, gt=0)


class ActionStep(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    action: Action
    selector: Optional[Selector3] = None
    inputValue: Optional[str] = None
    notes: Optional[str] = None
    assert_: Optional[List[AssertItem2]] = Field(None, alias='assert')


class Model(BaseModel):
    ElementAtlas_1: Optional[ElementAtlas] = Field(None, alias='ElementAtlas')
    PlanRequest_1: Optional[PlanRequest] = Field(None, alias='PlanRequest')
    PlanResponse_1: Optional[PlanResponse] = Field(None, alias='PlanResponse')
    DomActionPlan_1: Optional[DomActionPlan] = Field(None, alias='DomActionPlan')
    Selector_1: Optional[Selector] = Field(None, alias='Selector')
    ActionStep_1: Optional[ActionStep] = Field(None, alias='ActionStep')
    Assertion_1: Optional[Assertion] = Field(None, alias='Assertion')
    Fallback_1: Optional[Fallback] = Field(None, alias='Fallback')
