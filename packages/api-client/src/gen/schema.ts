/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health */
        get: operations["health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rule/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rule Check */
        post: operations["rule_check_rule_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suggest/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suggest Get */
        post: operations["suggest_get_suggest_get_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/url/drag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Url Drag */
        post: operations["url_drag_url_drag_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page/drag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Page Drag */
        post: operations["page_drag_page_drag_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /**
         * DomAtlasElement
         * @description A compact node for selector learning.
         */
        DomAtlasElement: {
            /** Idx */
            idx: number;
            /** Tag */
            tag: string;
            /** Id */
            id?: string | null;
            /** Classlist */
            classList?: string[] | null;
            /** Role */
            role?: string | null;
            /** Dataattrs */
            dataAttrs?: {
                [key: string]: string;
            } | null;
            /** Textsample */
            textSample?: string | null;
            /** Csspath */
            cssPath?: string | null;
            /** Parentidx */
            parentIdx?: number | null;
        };
        /** DomAtlasSnapshot */
        DomAtlasSnapshot: {
            /** Atlasid */
            atlasId: string;
            /** Siteid */
            siteId: string;
            /** Url */
            url: string;
            /** Domhash */
            domHash: string;
            /** Capturedat */
            capturedAt: string;
            /** Elementcount */
            elementCount: number;
            /** Elements */
            elements?: components["schemas"]["DomAtlasElement"][];
            /**
             * Version
             * @default atlas-v1
             */
            version: string;
        };
        /** Event */
        Event: {
            /**
             * Type
             * @enum {string}
             */
            type: "dom_click" | "input_change" | "page_load" | "submit" | "route_change";
            /** Ts */
            ts: number;
            telemetry: components["schemas"]["Telemetry"];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthResponse */
        HealthResponse: {
            /**
             * Status
             * @default ok
             */
            status: string;
        };
        /** PageDragRequest */
        PageDragRequest: {
            /** Siteid */
            siteId: string;
            /** Url */
            url: string;
            /**
             * Mode
             * @default atlas
             * @enum {string}
             */
            mode: "atlas" | "all";
            /**
             * Force
             * @default false
             */
            force: boolean;
        };
        /** PageDragResponse */
        PageDragResponse: {
            atlas?: components["schemas"]["DomAtlasSnapshot"] | null;
            /** Normalized */
            normalized?: {
                [key: string]: unknown;
            } | null;
            /** Queuedplanrebuild */
            queuedPlanRebuild?: boolean | null;
        };
        /** RuleCheckRequest */
        RuleCheckRequest: {
            /** Siteid */
            siteId: string;
            /** Sessionid */
            sessionId: string;
            event: components["schemas"]["Event"];
        };
        /** RuleCheckResponse */
        RuleCheckResponse: {
            /** Eventtype */
            eventType: string;
            /** Matchedrules */
            matchedRules: string[];
            /** Shouldproceed */
            shouldProceed: boolean;
            /** Reason */
            reason?: string | null;
        };
        /** SuggestGetContext */
        SuggestGetContext: {
            /** Matchedrules */
            matchedRules: string[];
            /** Eventtype */
            eventType: string;
        };
        /** SuggestGetRequest */
        SuggestGetRequest: {
            /** Siteid */
            siteId: string;
            /** Sessionid */
            sessionId: string;
            context: components["schemas"]["SuggestGetContext"];
            /** Userinput */
            userInput?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuggestGetResponse */
        SuggestGetResponse: {
            /** Suggestions */
            suggestions: components["schemas"]["Suggestion"][];
            /** Trace */
            trace?: string[] | null;
            /** Ttlsec */
            ttlSec?: number | null;
            /** Planversion */
            planVersion?: string | null;
            /**
             * Noactionreason
             * @enum {unknown}
             */
            noActionReason?: "no_trigger" | "debounced" | "budget_exceeded" | "plan_missing" | "unknown_selector" | null;
        };
        /** Suggestion */
        Suggestion: {
            /** Id */
            id?: string | null;
            /** Type */
            type: string;
            /** Message */
            message: string;
            /** Actions */
            actions?: components["schemas"]["SuggestionAction"][] | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuggestionAction */
        SuggestionAction: {
            /** Type */
            type: string;
            /** Label */
            label: string;
            /** Payload */
            payload?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * Telemetry
         * @description Sanitized DOM context (PII stripped upstream).
         */
        Telemetry: {
            /** Elementtext */
            elementText?: string | null;
            /** Elementhtml */
            elementHtml?: string | null;
            /** Attributes */
            attributes?: {
                [key: string]: string | null;
            } | null;
            /** Csspath */
            cssPath?: string | null;
            /** Xpath */
            xpath?: string | null;
            /** Nearbytext */
            nearbyText?: string[] | null;
            /** Ancestors */
            ancestors?: {
                [key: string]: string | null;
            }[] | null;
        };
        /** UrlDragOptions */
        UrlDragOptions: {
            /** Depth */
            depth?: number | null;
            /**
             * Followrobotstxt
             * @default true
             */
            followRobotsTxt: boolean;
            /**
             * Maxbytes
             * @default 2000000
             */
            maxBytes: number | null;
            /**
             * Timeoutsec
             * @default 20
             */
            timeoutSec: number | null;
        };
        /** UrlDragRequest */
        UrlDragRequest: {
            /** Siteid */
            siteId: string;
            /** Urls */
            urls?: string[] | null;
            /** Domain */
            domain?: string | null;
            /**
             * Mode
             * @default all
             * @enum {string}
             */
            mode: "info" | "all";
            options?: components["schemas"]["UrlDragOptions"] | null;
        };
        /** UrlDragResponse */
        UrlDragResponse: {
            /** Jobid */
            jobId: string;
            /**
             * Queued
             * @default true
             */
            queued: boolean;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    rule_check_rule_check_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Site-Key"?: string | null;
                "X-Contract-Version"?: string | null;
                "X-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RuleCheckRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RuleCheckResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suggest_get_suggest_get_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Site-Key"?: string | null;
                "X-Contract-Version"?: string | null;
                "X-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SuggestGetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuggestGetResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    url_drag_url_drag_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Site-Key"?: string | null;
                "X-Contract-Version"?: string | null;
                "X-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UrlDragRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UrlDragResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    page_drag_page_drag_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Site-Key"?: string | null;
                "X-Contract-Version"?: string | null;
                "X-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageDragRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDragResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
