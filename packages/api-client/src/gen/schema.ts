/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/rule/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rule Check */
        post: operations["rule_check_rule_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suggest/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suggest Get */
        post: operations["suggest_get_suggest_get_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/site/map": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Site Map */
        get: operations["get_site_map_site_map_get"];
        put?: never;
        /** Build Site Map */
        post: operations["build_site_map_site_map_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/site/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Site Info */
        get: operations["get_site_info_site_info_get"];
        put?: never;
        /** Drag Site Info */
        post: operations["drag_site_info_site_info_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/site/atlas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Site Atlas */
        get: operations["get_site_atlas_site_atlas_get"];
        put?: never;
        /** Drag Site Atlas */
        post: operations["drag_site_atlas_site_atlas_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health */
        get: operations["health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** Action */
        Action: {
            /** Id */
            id: string;
            /** Label */
            label: string;
            /** Value */
            value?: unknown | null;
        };
        /** CtaSpec */
        CtaSpec: {
            /** Label */
            label: string;
            /**
             * Kind
             * @default link
             */
            kind: string;
            /** Url */
            url?: string | null;
            /** Sku */
            sku?: string | null;
            /** Payload */
            payload?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * DomAtlasElement
         * @description A compact node for selector learning.
         */
        DomAtlasElement: {
            /** Idx */
            idx: number;
            /** Tag */
            tag: string;
            /** Id */
            id?: string | null;
            /** Classlist */
            classList?: string[] | null;
            /** Role */
            role?: string | null;
            /** Dataattrs */
            dataAttrs?: {
                [key: string]: string;
            } | null;
            /** Textsample */
            textSample?: string | null;
            /** Csspath */
            cssPath?: string | null;
            /** Parentidx */
            parentIdx?: number | null;
        };
        /** DomAtlasSnapshot */
        DomAtlasSnapshot: {
            /** Atlasid */
            atlasId: string;
            /** Siteid */
            siteId: string;
            /** Url */
            url: string;
            /** Domhash */
            domHash: string;
            /** Capturedat */
            capturedAt: string;
            /** Elementcount */
            elementCount: number;
            /** Elements */
            elements?: components["schemas"]["DomAtlasElement"][];
            /**
             * Version
             * @default atlas-v1
             */
            version: string;
        };
        /** Event */
        Event: {
            /**
             * Type
             * @enum {string}
             */
            type: "dom_click" | "input_change" | "page_load" | "submit" | "route_change";
            /** Ts */
            ts: number;
            telemetry: components["schemas"]["Telemetry"];
        };
        /** FieldSpec */
        FieldSpec: {
            /** Key */
            key: string;
            /**
             * Type
             * @enum {string}
             */
            type: "text" | "number" | "select" | "radio" | "checkbox" | "textarea" | "range" | "toggle";
            /** Label */
            label: string;
            /**
             * Required
             * @default false
             */
            required: boolean;
            /** Options */
            options?: components["schemas"]["InputOption"][] | null;
            /** Validation */
            validation?: {
                [key: string]: unknown;
            } | null;
        };
        /** FormSpec */
        FormSpec: {
            /** Title */
            title?: string | null;
            /** Fields */
            fields?: components["schemas"]["FieldSpec"][];
            /**
             * Submitlabel
             * @default Continue
             */
            submitLabel: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthResponse */
        HealthResponse: {
            /**
             * Status
             * @default ok
             */
            status: string;
        };
        /** InputOption */
        InputOption: {
            /** Value */
            value: unknown;
            /** Label */
            label: string;
        };
        /** RuleCheckRequest */
        RuleCheckRequest: {
            /** Siteid */
            siteId: string;
            /** Sessionid */
            sessionId: string;
            event: components["schemas"]["Event"];
        };
        /** RuleCheckResponse */
        RuleCheckResponse: {
            /** Eventtype */
            eventType: string;
            /** Matchedrules */
            matchedRules: string[];
            /** Shouldproceed */
            shouldProceed: boolean;
            /** Reason */
            reason?: string | null;
        };
        /** SiteAtlasRequest */
        SiteAtlasRequest: {
            /** Siteid */
            siteId: string;
            /** Url */
            url: string;
            /**
             * Force
             * @default false
             */
            force: boolean;
        };
        /** SiteAtlasResponse */
        SiteAtlasResponse: {
            /** Siteid */
            siteId: string;
            /** Url */
            url: string;
            atlas?: components["schemas"]["DomAtlasSnapshot"] | null;
            /** Queuedplanrebuild */
            queuedPlanRebuild?: boolean | null;
        };
        /** SiteInfoRequest */
        SiteInfoRequest: {
            /** Siteid */
            siteId: string;
            /** Path */
            path?: string | null;
            /** Url */
            url?: string | null;
            /**
             * Force
             * @default false
             */
            force: boolean;
        };
        /** SiteInfoResponse */
        SiteInfoResponse: {
            /** Siteid */
            siteId: string;
            /** Url */
            url: string;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
            /** Normalized */
            normalized?: {
                [key: string]: unknown;
            } | null;
        };
        /** SiteMapPage */
        SiteMapPage: {
            /** Url */
            url: string;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SiteMapRequest */
        SiteMapRequest: {
            /** Siteid */
            siteId: string;
            /** Url */
            url?: string | null;
            /**
             * Depth
             * @default 1
             */
            depth: number | null;
            /**
             * Force
             * @default false
             */
            force: boolean;
        };
        /** SiteMapResponse */
        SiteMapResponse: {
            /** Siteid */
            siteId: string;
            /** Pages */
            pages: components["schemas"]["SiteMapPage"][];
        };
        /** SuggestGetRequest */
        SuggestGetRequest: {
            /** Siteid */
            siteId: string;
            /** Sessionid */
            sessionId: string;
            /** Intentid */
            intentId?: string | null;
            /** Prevturnid */
            prevTurnId?: string | null;
            /** Answers */
            answers?: {
                [key: string]: unknown;
            } | null;
            /** Context */
            context: {
                [key: string]: unknown;
            };
        };
        /** SuggestGetResponse */
        SuggestGetResponse: {
            turn: components["schemas"]["Turn"];
        };
        /** Suggestion */
        Suggestion: {
            /** Type */
            type: string;
            /** Id */
            id?: string | null;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Image */
            image?: string | null;
            /** Attributes */
            attributes?: {
                [key: string]: unknown;
            } | null;
            primaryCta?: components["schemas"]["CtaSpec"] | null;
            /** Actions */
            actions?: components["schemas"]["CtaSpec"][] | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * Telemetry
         * @description Sanitized DOM context (PII stripped upstream).
         */
        Telemetry: {
            /** Elementtext */
            elementText?: string | null;
            /** Elementhtml */
            elementHtml?: string | null;
            /** Attributes */
            attributes?: {
                [key: string]: string | null;
            } | null;
            /** Csspath */
            cssPath?: string | null;
            /** Xpath */
            xpath?: string | null;
            /** Nearbytext */
            nearbyText?: string[] | null;
            /** Ancestors */
            ancestors?: {
                [key: string]: string | null;
            }[] | null;
        };
        /** Turn */
        Turn: {
            /** Intentid */
            intentId: string;
            /** Turnid */
            turnId: string;
            /**
             * Status
             * @enum {string}
             */
            status: "ask" | "final";
            /** Message */
            message?: string | null;
            /** Actions */
            actions?: components["schemas"]["Action"][] | null;
            form?: components["schemas"]["FormSpec"] | null;
            /** Suggestions */
            suggestions?: components["schemas"]["Suggestion"][] | null;
            ui?: components["schemas"]["UIHint"] | null;
            /** Ttlsec */
            ttlSec?: number | null;
        };
        /** UIHint */
        UIHint: {
            /** Render */
            render?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    rule_check_rule_check_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Contract-Version"?: string | null;
                "X-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RuleCheckRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RuleCheckResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suggest_get_suggest_get_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Contract-Version"?: string | null;
                "X-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SuggestGetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuggestGetResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_site_map_site_map_get: {
        parameters: {
            query: {
                siteId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteMapResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    build_site_map_site_map_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SiteMapRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteMapResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_site_info_site_info_get: {
        parameters: {
            query: {
                siteId: string;
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteInfoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    drag_site_info_site_info_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SiteInfoRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteInfoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_site_atlas_site_atlas_get: {
        parameters: {
            query: {
                siteId: string;
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteAtlasResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    drag_site_atlas_site_atlas_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SiteAtlasRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteAtlasResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
}
